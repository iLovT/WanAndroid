package com.jzh.wanandroid.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jzh.wanandroid.entity.navigation.NavigationListResponse;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NAVIGATION_RESPONSE_DATA".
*/
public class NavigationResponseDataDao extends AbstractDao<NavigationResponseData, Void> {

    public static final String TABLENAME = "NAVIGATION_RESPONSE_DATA";

    /**
     * Properties of entity NavigationResponseData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Articles = new Property(0, String.class, "articles", false, "ARTICLES");
        public final static Property Cid = new Property(1, Integer.class, "cid", false, "CID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
    }

    private final NavigationListResponse articlesConverter = new NavigationListResponse();

    public NavigationResponseDataDao(DaoConfig config) {
        super(config);
    }
    
    public NavigationResponseDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NAVIGATION_RESPONSE_DATA\" (" + //
                "\"ARTICLES\" TEXT," + // 0: articles
                "\"CID\" INTEGER," + // 1: cid
                "\"NAME\" TEXT);"); // 2: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NAVIGATION_RESPONSE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NavigationResponseData entity) {
        stmt.clearBindings();
 
        List articles = entity.getArticles();
        if (articles != null) {
            stmt.bindString(1, articlesConverter.convertToDatabaseValue(articles));
        }
 
        Integer cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(2, cid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NavigationResponseData entity) {
        stmt.clearBindings();
 
        List articles = entity.getArticles();
        if (articles != null) {
            stmt.bindString(1, articlesConverter.convertToDatabaseValue(articles));
        }
 
        Integer cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(2, cid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public NavigationResponseData readEntity(Cursor cursor, int offset) {
        NavigationResponseData entity = new NavigationResponseData( //
            cursor.isNull(offset + 0) ? null : articlesConverter.convertToEntityProperty(cursor.getString(offset + 0)), // articles
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NavigationResponseData entity, int offset) {
        entity.setArticles(cursor.isNull(offset + 0) ? null : articlesConverter.convertToEntityProperty(cursor.getString(offset + 0)));
        entity.setCid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(NavigationResponseData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(NavigationResponseData entity) {
        return null;
    }

    @Override
    public boolean hasKey(NavigationResponseData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
